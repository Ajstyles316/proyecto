from django.core.management.base import BaseCommand
from core.mongo_connection import get_database
from datetime import datetime

class Command(BaseCommand):
    help = 'Corrige datos antiguos en el registro de actividad'

    def add_arguments(self, parser):
        parser.add_argument(
            '--backup',
            action='store_true',
            help='Crear respaldo antes de corregir',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Mostrar qu√© se corregir√≠a sin hacer cambios',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando correcci√≥n de datos antiguos...')
        )
        
        if options['backup']:
            self.crear_respaldo()
        
        if options['dry_run']:
            self.corregir_mensajes_antiguos(dry_run=True)
            self.corregir_modulos_antiguos(dry_run=True)
        else:
            self.corregir_mensajes_antiguos(dry_run=False)
            self.corregir_modulos_antiguos(dry_run=False)
        
        self.stdout.write(
            self.style.SUCCESS('üéâ ¬°Proceso de correcci√≥n completado!')
        )

    def crear_respaldo(self):
        """Crea un respaldo de los datos"""
        db = get_database()
        seguimiento_collection = db['seguimiento']
        
        backup_collection = db['seguimiento_backup_' + datetime.now().strftime('%Y%m%d_%H%M%S')]
        
        self.stdout.write('üíæ Creando respaldo de datos...')
        
        registros = list(seguimiento_collection.find({}))
        if registros:
            backup_collection.insert_many(registros)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Respaldo creado: {backup_collection.name}')
            )

    def corregir_mensajes_antiguos(self, dry_run=False):
        """Corrige los mensajes antiguos"""
        db = get_database()
        seguimiento_collection = db['seguimiento']
        
        self.stdout.write('üîç Buscando registros con errores ortogr√°ficos...')
        
        registros_corregidos = 0
        
        registros = seguimiento_collection.find({})
        
        for registro in registros:
            mensaje_original = registro.get('mensaje', '')
            mensaje_corregido = mensaje_original
            
            if isinstance(mensaje_corregido, str):
                # Aplicar todas las correcciones
                mensaje_corregido = self.aplicar_correcciones_mensaje(mensaje_corregido)
            
            if mensaje_corregido != mensaje_original:
                if dry_run:
                    self.stdout.write(
                        f'üìù Se corregir√≠a: {mensaje_original[:50]}... ‚Üí {mensaje_corregido[:50]}...'
                    )
                else:
                    try:
                        seguimiento_collection.update_one(
                            {'_id': registro['_id']},
                            {'$set': {'mensaje': mensaje_corregido}}
                        )
                        self.stdout.write(
                            f'‚úÖ Corregido: {mensaje_original[:50]}... ‚Üí {mensaje_corregido[:50]}...'
                        )
                    except Exception as e:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå Error al corregir registro: {e}')
                        )
                registros_corregidos += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'üìä Total de registros corregidos: {registros_corregidos}')
        )

    def corregir_modulos_antiguos(self, dry_run=False):
        """Corrige los nombres de m√≥dulos antiguos"""
        db = get_database()
        seguimiento_collection = db['seguimiento']
        
        self.stdout.write('üîç Corrigiendo nombres de m√≥dulos...')
        
        mapeo_modulos = {
            'ActaAsignacion': 'Asignaci√≥n',
            'HistorialControl': 'Control',
            'Depreciacion': 'Depreciaci√≥n',
            'Autenticacion': 'Autenticaci√≥n',
            'Pronostico': 'Pron√≥stico'
        }
        
        registros_corregidos = 0
        
        for modulo_antiguo, modulo_nuevo in mapeo_modulos.items():
            registros = seguimiento_collection.find({'modulo': modulo_antiguo})
            
            for registro in registros:
                if dry_run:
                    self.stdout.write(
                        f'üìù Se corregir√≠a m√≥dulo: {modulo_antiguo} ‚Üí {modulo_nuevo}'
                    )
                else:
                    try:
                        seguimiento_collection.update_one(
                            {'_id': registro['_id']},
                            {'$set': {'modulo': modulo_nuevo}}
                        )
                        self.stdout.write(
                            f'‚úÖ M√≥dulo corregido: {modulo_antiguo} ‚Üí {modulo_nuevo}'
                        )
                    except Exception as e:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå Error al corregir m√≥dulo: {e}')
                        )
                registros_corregidos += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'üìä Total de m√≥dulos corregidos: {registros_corregidos}')
        )

    def aplicar_correcciones_mensaje(self, mensaje):
        """Aplica todas las correcciones a un mensaje"""
        # Correcciones de preposiciones y art√≠culos
        correcciones = [
            (' De ', ' de '),
            (' Para ', ' para '),
            (' Con ', ' con '),
            (' Sin ', ' sin '),
            (' Por ', ' por '),
            (' En ', ' en '),
            (' Sobre ', ' sobre '),
            (' Entre ', ' entre '),
            (' Hasta ', ' hasta '),
            (' Desde ', ' desde '),
            (' Hacia ', ' hacia '),
            (' Seg√∫n ', ' seg√∫n '),
            (' Mediante ', ' mediante '),
            (' Durante ', ' durante '),
            (' Contra ', ' contra '),
            (' Tras ', ' tras '),
            (' Ante ', ' ante '),
            (' Bajo ', ' bajo '),
            (' Cabe ', ' cabe '),
        ]
        
        for antigua, nueva in correcciones:
            mensaje = mensaje.replace(antigua, nueva)
        
        # Correcciones espec√≠ficas de combinaciones
        correcciones_especificas = [
            ('De Sin Detalle Para Maquinaria', 'de sin detalle para maquinaria'),
            ('Para Maquinaria', 'para maquinaria'),
            ('Con Placa', 'con placa'),
            ('De Sin Detalle', 'de sin detalle'),
        ]
        
        for antigua, nueva in correcciones_especificas:
            mensaje = mensaje.replace(antigua, nueva)
        
        # Correcciones de acciones
        correcciones_acciones = [
            ('Cre√≥ Maquinaria con placa', 'Cre√≥ maquinaria con placa'),
            ('Edit√≥ Maquinaria con placa', 'Edit√≥ maquinaria con placa'),
            ('Cre√≥ Control para maquinaria', 'Cre√≥ control para maquinaria'),
            ('Edit√≥ Control para maquinaria', 'Edit√≥ control para maquinaria'),
            ('Cre√≥ Asignaci√≥n para maquinaria', 'Cre√≥ asignaci√≥n para maquinaria'),
            ('Edit√≥ Asignaci√≥n para maquinaria', 'Edit√≥ asignaci√≥n para maquinaria'),
            ('Cre√≥ Mantenimiento para maquinaria', 'Cre√≥ mantenimiento para maquinaria'),
            ('Edit√≥ Mantenimiento para maquinaria', 'Edit√≥ mantenimiento para maquinaria'),
            ('Cre√≥ Seguro para maquinaria', 'Cre√≥ seguro para maquinaria'),
            ('Edit√≥ Seguro para maquinaria', 'Edit√≥ seguro para maquinaria'),
            ('Cre√≥ Impuesto para maquinaria', 'Cre√≥ impuesto para maquinaria'),
            ('Edit√≥ Impuesto para maquinaria', 'Edit√≥ impuesto para maquinaria'),
            ('Cre√≥ ITV para maquinaria', 'Cre√≥ ITV para maquinaria'),
            ('Edit√≥ ITV para maquinaria', 'Edit√≥ ITV para maquinaria'),
            ('Cre√≥ Depreciaci√≥n para maquinaria', 'Cre√≥ depreciaci√≥n para maquinaria'),
            ('Edit√≥ Depreciaci√≥n para maquinaria', 'Edit√≥ depreciaci√≥n para maquinaria'),
        ]
        
        for antigua, nueva in correcciones_acciones:
            mensaje = mensaje.replace(antigua, nueva)
        
        # Correcciones de "sin detalle"
        mensaje = mensaje.replace('Sin detalle', 'sin detalle')
        
        return mensaje 